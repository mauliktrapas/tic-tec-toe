{"version":3,"sources":["../../src/index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA","file":"index.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// 'use non-strict'\n// class Square extends React.Component{\n/*function Square(props) {\n\n// }\n//     render(){\n        return(\n            <button className ={props.className} onClick={()=>props.onClick()}>{props.value} </button>\n        )\n    }\n// }\n\n// class Board extends React.Component{\nfunction Board(props) {\n// /!*    renderSquare(i){\n//         console.log(this.props.winingLine.filter((n)=>n===i).length);\n//         return <Square temp={ this.props.winingLine.filter((n)=>n===i).length>0?\"dark\":\"light\" }\n//                        winnerLine={this.props.winingLine} value={this.props.squares[i]} onClick={()=>this.props.onClick(i)} />\n//     }\n//\n//     render(){\n//\n//         return (\n//             <div className=\"outer\">\n//                 <div className=\"squ\">\n//                     {this.renderSquare(0)}\n//                     {this.renderSquare(1)}\n//                     {this.renderSquare(2)}\n//                 </div>\n//                 <div>\n//                     {this.renderSquare(3)}\n//                     {this.renderSquare(4)}\n//                     {this.renderSquare(5)}\n//                 </div>\n//                 <div>\n//                     {this.renderSquare(6)}\n//                     {this.renderSquare(7)}\n//                     {this.renderSquare(8)}\n//                 </div>\n//             </div>\n//         )\n//     }\n    return (\n        <div className=\"board\">\n            {Array(9).fill(null).map(\n                (v, i) =>\n                    <Square\n                         classNam={\n                             v===null?\"square\":\n                            props.winningLine.filter(\n                                (v) => v === i).length > 0 ?\n                                \"square square--win\" :\n                                \"square\"\n                        }\n                         key={i}\n                        value={props.squares[i]}\n                        onClick={() =>\n                            props.onClick(i)\n                        }\n                    />\n            )}\n        </div>\n    )\n// }\n}\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            history : [{\n                squares : Array(9).fill(null),\n                winingLine : Array(3).fill(null),\n            }],\n            isXNext : true,\n            steps : 0,\n\n        }\n\n    }\n\n    handleClick(i) {\n        const history=this.state.history.slice(0, this.state.steps + 1);\n        const current = history[this.state.steps];\n        const squares = current.squares.slice();\n        if(squares[i] || decideWinner(squares).square){\n            return;\n        }\n        squares[i]=this.state.isXNext?\"X\":\"O\";\n        this.setState(\n            {   history:history.concat([\n                {\n                squares:squares,\n                    winingLine : decideWinner(squares).winingLine,\n                }\n                ]),\n                isXNext : !this.state.isXNext,\n                steps : this.state.stepNumber + 1,\n                // steps : history.length,\n\n            }\n        );\n    }\n    moveTo(step){\n        this.setState({\n            isXNext : step%2===0,\n            steps : step\n        })\n    }\n\n    render(){\n        const history=this.state.history;\n        // const current = history[history.length-1];\n        const current = history[this.state.steps];\n\n        let status;\n        if(current.squares===null){\n            status = 'turn is' + (this.state.isXNext?'X':'O');\n        }else{\n\n            if(decideWinner(current.squares).square){\n                status = 'winner is ' + (decideWinner(current.squares).square);\n            }\n            else{\n                status = 'turn is' + (this.state.isXNext?'X':'O');\n            }\n        }\n        const moveList = history.map((temp,step)=>{\n            const desc = step ? ('goto step'+step) : 'goto initial step';\n            return(\n                <li key={step}>\n                    <button onClick={()=>this.moveTo(step)}>{desc}</button>\n                </li>\n            );\n        });\n        return(\n           <div className=\"game\">\n               <div >{status}</div>\n               <div>{moveList}</div>\n                <Board winningLine={current.winingLine} squares={current.squares} onClick={(i)=>this.handleClick(i)} />\n           </div>\n        )\n    }\n\n}\n\nfunction decideWinner(squares){\n    const lines=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ]\n    for(let i=0;i<lines.length;i++){\n        const [a,b,c]=lines[i];\n        if(squares[a] && squares[a]===squares[b] && squares[b]===squares[c]){\n            return {\"square\" : squares[a],\"winingLine\" : [a,b,c]};\n        }\n    }\n    return {\"square\" : null,\"winingLine\" : [null,null,null]};\n\n\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);*/\n\n\n/*\n\nfunction Square(props) {\n    return (\n        <button className={ props.className } onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    )\n}\n\nfunction Board(props) {\n    return (\n        <div className=\"board\">\n            { Array(9).fill(null).map(\n                (v, i) =>\n                    <Square\n                        key={ i }\n                        className={\n                            props.winningLine.filter(\n                                (v) => v === i).length > 0 ?\n                                \"square square--win\" :\n                                \"square\"\n                        }\n                        value={ props.squares[i] }\n                        onClick={ () =>\n                            props.onClick(i)\n                        }\n                    />\n            )}\n        </div>\n    )\n}\n\nclass Game extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null),\n                    winningLine: Array(3).fill(null),\n                }\n            ],\n            xIsNext: true,\n            stepNumber: 0,\n        }\n    }\n\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber+1)\n        const current = history[this.state.stepNumber]\n        const squares = current.squares.slice()\n\n        if (calculateWinner(squares).winner || squares[i]) {\n            return\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O'\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    winningLine: calculateWinner(squares).winningLine,\n                }\n            ]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: this.state.stepNumber + 1\n        })\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) ? false : true\n        })\n    }\n\n\n    render() {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[this.state.stepNumber]\n        const winner = calculateWinner(current.squares).winner\n\n        let status\n        if (winner) {\n            status = 'Winner: ' + winner\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n        }\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Move #' + move :\n                'Game start'\n            return (\n                <li key={move} ><a href=\"#\" onClick={() => this.jumpTo(move)}>{ desc }</a></li>\n            )\n        })\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={current.squares} winningLine={current.winningLine} onClick={(i) => this.handleClick(i)}/>\n                </div>\n                <div className=\"game-info\">\n                    <div>{ status }</div>\n                    <ol>{ moves }</ol>\n                </div>\n            </div>\n        )\n    }\n}\n\n// ========================================\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [ 0, 1, 2 ],\n        [ 3, 4, 5 ],\n        [ 6, 7, 8 ],\n        [ 0, 3, 6 ],\n        [ 1, 4, 7 ],\n        [ 2, 5, 8 ],\n        [ 0, 4, 8 ],\n        [ 2, 4, 6 ],\n    ]\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i]\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\"winner\": squares[a], \"winningLine\": [a, b, c]}\n        }\n    }\n    return {\"winner\": null, \"winningLine\": [null, null, null]}\n}\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n*/\n"]}